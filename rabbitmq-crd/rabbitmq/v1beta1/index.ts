// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { PermissionArgs } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { PermissionListArgs } from "./permissionList";
export type PermissionList = import("./permissionList").PermissionList;
export const PermissionList: typeof import("./permissionList").PermissionList = null as any;
utilities.lazyLoad(exports, ["PermissionList"], () => require("./permissionList"));

export { PermissionPatchArgs } from "./permissionPatch";
export type PermissionPatch = import("./permissionPatch").PermissionPatch;
export const PermissionPatch: typeof import("./permissionPatch").PermissionPatch = null as any;
utilities.lazyLoad(exports, ["PermissionPatch"], () => require("./permissionPatch"));

export { UserArgs } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserListArgs } from "./userList";
export type UserList = import("./userList").UserList;
export const UserList: typeof import("./userList").UserList = null as any;
utilities.lazyLoad(exports, ["UserList"], () => require("./userList"));

export { UserPatchArgs } from "./userPatch";
export type UserPatch = import("./userPatch").UserPatch;
export const UserPatch: typeof import("./userPatch").UserPatch = null as any;
utilities.lazyLoad(exports, ["UserPatch"], () => require("./userPatch"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:rabbitmq.com/v1beta1:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:PermissionList":
                return new PermissionList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:PermissionPatch":
                return new PermissionPatch(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:User":
                return new User(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:UserList":
                return new UserList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:UserPatch":
                return new UserPatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("crds", "rabbitmq.com/v1beta1", _module)
